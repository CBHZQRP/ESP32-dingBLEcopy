#include <WiFi.h>
#include <HTTPClient.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <vector>
#include <WebServer.h>
#include <Preferences.h>

// Web服务器端口
#define WEB_PORT 80

// WiFi 配置
char ssid[32] = "";
char password[32] = "";

// Leancloud 配置
const String appId = "appid";               //替换appid
const String appKey = "appkey";             //替换appkey
const String className = "AdvertisingData"; // Class不需要动，注意去220行换你的api服务器地址

// 指定的MAC地址
static BLEAddress *pServerAddress = new BLEAddress("FF:FF:FF:FF:FF:FF"); // 替换目标mac地址大写

// 存储上一次的通告数据
std::vector<uint8_t> lastPayload;

WebServer server(WEB_PORT);

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
public:
    std::vector<uint8_t> currentPayload;
    bool hasChanged = false;

    void onResult(BLEAdvertisedDevice advertisedDevice) {
        if (advertisedDevice.getAddress().equals(*pServerAddress)) {
            Serial.print("Device found: ");
            Serial.println(advertisedDevice.toString().c_str());

            // 获取原始通告数据
            uint8_t* payload = advertisedDevice.getPayload();
            size_t payloadLength = advertisedDevice.getPayloadLength();
            currentPayload.assign(payload, payload + payloadLength);

            // 比较当前数据和上次数据是否变化
            if (currentPayload != lastPayload) {
                Serial.print("Raw data changed: ");
                for (size_t i = 0; i < currentPayload.size(); i++) {
                    Serial.printf("%02X ", currentPayload[i]);
                }
                Serial.println();

                // 更新上次数据
                lastPayload = currentPayload;
                hasChanged = true;
            } else {
                hasChanged = false;
            }
        }
    }
};

void loadCredentials() {
    Preferences preferences;
    preferences.begin("wifi", false);
    preferences.getString("ssid", ssid, sizeof(ssid));
    preferences.getString("password", password, sizeof(password));
    preferences.end();
}

void saveCredentials() {
    Preferences preferences;
    preferences.begin("wifi", false);
    preferences.putString("ssid", ssid);
    preferences.putString("password", password);
    preferences.end();
}

void handleRoot() {
    String html = "<html><head><meta charset='UTF-8'><title>ESP32C3 Supermini Config</title></head>";
    html += "<body><h1>ESP32C3 Supermini Config</h1>";
    html += "<form method='post' action='/config'>";
    html += "SSID:<br><input type='text' name='ssid'><br>";
    html += "Password:<br><input type='password' name='password'><br><br>";
    html += "<input type='submit' value='Submit'>";
    html += "</form></body></html>";
    server.send(200, "text/html; charset=utf-8", html);
}

void handleConfig() {
    if (server.hasArg("ssid") && server.hasArg("password")) {
        strncpy(ssid, server.arg("ssid").c_str(), sizeof(ssid) - 1);
        strncpy(password, server.arg("password").c_str(), sizeof(password) - 1);
        saveCredentials();
        server.send(200, "text/plain", "Configuration saved. Restarting...");
        ESP.restart();
    } else {
        server.send(400, "text/plain", "Invalid request");
    }
}

unsigned long apStartTime = 0;
bool apModeStarted = false;

void startAPMode() {
    const char* apSSID = "ESP32C3Supermini";
    const char* apPassword = "12345678";
    WiFi.softAP(apSSID, apPassword);
    IPAddress ip = WiFi.softAPIP();
    Serial.print("AP IP address: ");
    Serial.println(ip);

    server.on("/", handleRoot);
    server.on("/config", HTTP_POST, handleConfig);
    server.begin();
    Serial.println("HTTP server started");

    apStartTime = millis();
    apModeStarted = true;
}

int httpFailCount = 0;
const int maxHttpFailCount = 3;

// 设定LED连接到GPIO8
#define LED_PIN 8
unsigned long previousMillis = 0;
const long interval = 500; // 500ms间隔
bool ledState = false;

void setup() {
    Serial.begin(115200);
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW); // 初始状态为熄灭

    // 加载存储的WiFi配置
    loadCredentials();

    // 尝试连接到WiFi
    WiFi.begin(ssid, password);
    unsigned long startTime = millis();
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("正在连接到WiFi...");
        
        unsigned long currentMillis = millis();
        if (currentMillis - previousMillis >= interval) {
            previousMillis = currentMillis;
            ledState = !ledState;
            digitalWrite(LED_PIN, ledState); // 500ms 间隔闪烁
        }

        if (millis() - startTime > 30000) {
            Serial.println("连接WiFi超时，启动AP模式");
            startAPMode();
            return;
        }
    }

    Serial.println("WiFi连接成功");
    digitalWrite(LED_PIN, LOW); // WiFi连接成功，熄灭LED

    // 初始化BLE设备
    BLEDevice::init("");
    BLEScan* pBLEScan = BLEDevice::getScan();
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
    pBLEScan->setActiveScan(true); // 主动扫描
    pBLEScan->setInterval(100);
    pBLEScan->setWindow(99); // 扫描间隔和窗口设置
}

void loop() {
    unsigned long currentMillis = millis();

    if (WiFi.status() != WL_CONNECTED) {
        if (!apModeStarted) {
            startAPMode();
        } else {
            server.handleClient();
            if (currentMillis - previousMillis >= 150) {
                previousMillis = currentMillis;
                ledState = !ledState;
                digitalWrite(LED_PIN, ledState); // 150ms 间隔闪烁
            }

            if (currentMillis - apStartTime > 90000) {
                Serial.println("AP模式超时，重启设备");
                ESP.restart();
            }
        }
        return;
    }

    digitalWrite(LED_PIN, LOW); // WiFi连接成功，熄灭LED

    MyAdvertisedDeviceCallbacks* callbacks = new MyAdvertisedDeviceCallbacks();
    BLEScanResults foundDevices = BLEDevice::getScan()->start(10);
    Serial.print("Devices found: ");
    Serial.println(foundDevices.getCount());
    Serial.println("Scan done!");

    if (callbacks->hasChanged) {
        String jsonData = "{\"data\": \"";
        for (uint8_t byte : callbacks->currentPayload) {
            char hexStr[3];
            sprintf(hexStr, "%02X", byte);
            jsonData += hexStr;
        }
        jsonData += "\", \"mac\": \"";
        String macAddress = pServerAddress->toString().c_str();
        macAddress.toUpperCase();
        jsonData += macAddress;
        jsonData += "\"}";

        Serial.print("JSON Data: ");
        Serial.println(jsonData);

        HTTPClient http;
        String url = "apiurl" + className;//这里把apiurl替换为你的api服务器地址
        http.begin(url);
        http.addHeader("Content-Type", "application/json");
        http.addHeader("X-LC-Id", appId);
        http.addHeader("X-LC-Key", appKey);
        int httpResponseCode = http.POST(jsonData);

        if (httpResponseCode > 0) {
            String response = http.getString();
            Serial.println("HTTP响应代码: " + String(httpResponseCode));
            Serial.println("响应: " + response);
            httpFailCount = 0;
        } else {
            Serial.println("HTTP请求失败, 错误代码: " + String(httpResponseCode));
            httpFailCount++;
            if (httpFailCount >= maxHttpFailCount) {
                Serial.println("HTTP请求连续失败三次，重启设备");
                ESP.restart();
            }
        }

        Serial.print("Uploaded Data: ");
        Serial.println(jsonData);
        http.end();

        // 在发送数据时闪烁两下
        for (int i = 0; i < 2; i++) {
            digitalWrite(LED_PIN, HIGH);
            delay(250);
            digitalWrite(LED_PIN, LOW);
            delay(250);
        }
    } else {
        Serial.println("无数据变化，不上传");
    }

    BLEDevice::getScan()->clearResults();
    delete callbacks;

    delay(10000); // 延迟10秒后再次扫描
}
